import { useEffect } from "react";
import { useDispatch } from "react-redux";
import dynamic from "next/dynamic";
import Head from 'next/head';
import axios from 'axios';

import {withLayout} from "../layout/Layout";
import {getMovieByName, getMovie} from '../config';
import {writeMovies} from '../store/movies/actions-movies';
import {writeMoviesFiltered} from '../store/filter/actions-filter';
import {useData} from '../store/Context';
import { Preloader } from "../components/Preloader";

const LazyHero = dynamic(() => import('../components/Hero'));
const LazyFilter = dynamic(() => import('../components/Filter'));
const LazyMoreMovies = dynamic(() => import('../components/MoreMovie'));
const LazySubscribe = dynamic(() => import('../components/Form'));


const Home = ({HeroSsrFetch, FiltersSsrFetch, MoviesSsrFetch}) => {
	const dispatch = useDispatch();
	const {setMovies, setMoviesFiltered} = useData();

	useEffect(() => {
		setTimeout(() => {
			setMovies(MoviesSsrFetch);
			setMoviesFiltered(MoviesSsrFetch);
			
			dispatch(writeMovies(MoviesSsrFetch));
			dispatch(writeMoviesFiltered(MoviesSsrFetch));
		}, 5000)
	}, [MoviesSsrFetch]);

	return (
		<>
			<Head>
				<title>CinemaRoom</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			{!LazySubscribe && !HeroSsrFetch && !FiltersSsrFetch && !LazySubscribe ? <Preloader/> :
				<>
					<LazyHero hero={HeroSsrFetch}/>
					<LazyFilter Filters={FiltersSsrFetch}/>
					<LazyMoreMovies/>
					<LazySubscribe/>
				</>
			}
			
		</>
	)
};


export const getServerSideProps = async () => {
	const {data: hero} = await axios.get(getMovieByName('Puss in Boots: The Last Wish'));
	const {data: Filters} = await axios.get('http://localhost:5000/filter');
	const {data: movies} = await axios.get(getMovie(1));

	if(!hero && !Filters && !movies){
		return{
			notFound: true
		}
	}

	return{
		props:{
			HeroSsrFetch: hero.results[0],
			FiltersSsrFetch: Filters,
			MoviesSsrFetch: movies.results
		}
	}
}

export default withLayout(Home);
